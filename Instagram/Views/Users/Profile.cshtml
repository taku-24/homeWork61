@model Instagram.Models.User

@{
    ViewBag.Title = "Профиль " + Model.UserName;
    var posts = ViewBag.Posts as IEnumerable<Instagram.Models.Post>;
}

<div class="d-flex justify-content-center">
    <div class="card post-card shadow-sm">
        <div class="card-body text-center">
            <img src="@Model.ProfilePicturePath" alt="avatar"
                 style="width:120px; height:120px; border-radius:50%; object-fit:cover;" />

            <h3 class="mt-3">@Model.UserName</h3>
            <p><b>Имя:</b> @Model.Name</p>
            <p><b>Инфо:</b> @Model.UserInfo</p>

            <p>
                <b>Постов:</b> @Model.PostsCount |
                <b>Подписчики:</b> @Model.FollowersCount |
                <b>Подписки:</b> @Model.FollowingCount
            </p>

            @if (User.Identity.IsAuthenticated && User.Identity.Name != Model.UserName)
            {
                <form id="followForm">
                    @Html.AntiForgeryToken()
                    <button id="followBtn" type="button" class="btn btn-success"
                            onclick="followUser(@Model.Id)">Подписаться</button>
                </form>

            }
        </div>

        <hr />

        <div class="card-body">
            <h4>Публикации</h4>
            @if (posts != null && posts.Any())
            {
                <div class="row">
                    @foreach (var post in posts)
                    {
                        <div class="col-md-4 mb-3">
                            <a asp-controller="Posts" asp-action="Details" asp-route-id="@post.Id">
                                <img src="@post.ImagePath" class="img-fluid rounded" style="height:200px; object-fit:cover;" />
                            </a>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-muted">У пользователя пока нет публикаций.</p>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function getToken() {
            const el = document.querySelector('input[name="__RequestVerificationToken"]');
            return el ? el.value : '';
        }

        function followUser(userId) {
            $.ajax({
                url: '/Follow/FollowUser',
                type: 'POST',
                data: { userId, __RequestVerificationToken: getToken() },
                success: function(res){
                    if(res.success){
                        $('#followBtn')
                            .removeClass('btn-success').addClass('btn-danger')
                            .text('Отписаться')
                            .attr('onclick', `unfollowUser(${userId})`);
                    } else { alert(res.message); }
                }
            });
        }

        function unfollowUser(userId) {
            $.ajax({
                url: '/Follow/UnfollowUser',
                type: 'POST',
                data: { userId, __RequestVerificationToken: getToken() },
                success: function(res){
                    if(res.success){
                        $('#followBtn')
                            .removeClass('btn-danger').addClass('btn-success')
                            .text('Подписаться')
                            .attr('onclick', `followUser(${userId})`);
                    } else { alert(res.message); }
                }
            });
        }
    </script>
}